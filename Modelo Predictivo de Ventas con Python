import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Simulación de datos
np.random.seed(42)
data = pd.DataFrame({
    'warehouse_capacity': np.random.randint(50, 200, 100),
    'distributor_reliability': np.random.rand(100) * 100,
    'transport_cost': np.random.rand(100) * 50,
    'marketing_spend': np.random.randint(1000, 5000, 100)
})

# Generación de ventas con una relación lineal y ruido aleatorio
data['sales'] = (
    2 * data['warehouse_capacity'] +
    1.5 * data['distributor_reliability'] -
    0.5 * data['transport_cost'] +
    0.1 * data['marketing_spend'] +
    np.random.randn(100) * 10
)

# Definir variables predictoras y variable objetivo
X = data.drop('sales', axis=1)
y = data['sales']

# Dividir los datos en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crear y entrenar el modelo
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Realizar predicciones y evaluar el modelo
y_pred = model.predict(X_test)
print("MSE:", mean_squared_error(y_test, y_pred))
print("R2 Score:", r2_score(y_test, y_pred))
